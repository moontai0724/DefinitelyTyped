import { Extendable, MayLowercase } from './common';

export type SecurityType = MayLowercase<'apiKey' | 'http' | 'mutualTLS' | 'oauth2' | 'openIdConnect'>;

export interface BaseSecurity extends Extendable {
    /**
     * The type of the security scheme.
     */
    type: SecurityType;
    /**
     * A description for security scheme. [CommonMark
     * syntax](https://spec.commonmark.org/) _MAY_ be used for rich text
     * representation.
     */
    description?: string;
    name?: never;
    in?: never;
    scheme?: never;
    bearerFormat?: never;
    flows?: never;
    openIdConnectUrl?: never;
}

export type ApiKeyLocation = 'query' | 'header' | 'cookie';

export interface ApiKeySecurity extends Omit<BaseSecurity, 'name' | 'in'> {
    type: 'apiKey';
    /**
     * The name of the header, query or cookie parameter to be used.
     */
    name: string;
    /**
     * The location of the API key.
     */
    in: ApiKeyLocation;
}

export type HttpSecurityScheme = MayLowercase<
    | 'Basic'
    | 'Bearer'
    | 'Digest'
    | 'DPoP'
    | 'HOBA'
    | 'Mutual'
    | 'Negotiate'
    | 'OAuth'
    | 'SCRAM-SHA-1'
    | 'SCRAM-SHA-256'
    | 'vapid'
>;

export interface HttpSecurity extends Omit<BaseSecurity, 'scheme'> {
    type: 'http';
    /**
     * The name of the HTTP Authorization scheme to be used in the Authorization
     * header as defined in
     * \[[RFC7235](https://spec.openapis.org/oas/v3.1.0#bib-RFC7235)\]. The
     * values used _SHOULD_ be registered in the [IANA Authentication Scheme
     * registry](https://www.iana.org/assignments/http-authschemes/http-authschemes.xhtml).
     */
    scheme: HttpSecurityScheme;
}

export interface HttpBearerSecurity extends Omit<HttpSecurity, 'bearerFormat'> {
    type: 'http';
    scheme: MayLowercase<'Bearer'>;
    /**
     * A hint to the client to identify how the bearer token is formatted.
     * Bearer tokens are usually generated by an authorization server, so this
     * information is primarily for documentation purposes.
     */
    bearerFormat?: string;
}

export interface MutualTLSSecurity extends BaseSecurity {
    type: MayLowercase<'mutualTLS'>;
}

/**
 * Configuration details for a supported OAuth Flow
 *
 * @see https://spec.openapis.org/oas/v3.1.0#oauth-flow-object
 */
export interface BasicOAuthFlow extends Extendable {
    /**
     * The URL to be used for obtaining refresh tokens. This _MUST_ be in the
     * form of a URL. The OAuth2 standard requires the use of TLS.
     */
    refreshUrl?: string;
    /**
     * The available scopes for the OAuth2 security scheme. A map between the
     * scope name and a short description for it. The map _MAY_ be empty.
     */
    scopes: { [scopeName: string]: string };
}

interface WithAuthorizationUrl {
    /**
     * The authorization URL to be used for this flow. This _MUST_ be in the
     * form of a URL. The OAuth2 standard requires the use of TLS.
     */
    authorizationUrl: string;
}

interface WithTokenUrl {
    /**
     * The token URL to be used for this flow. This _MUST_ be in the form of a
     * URL. The OAuth2 standard requires the use of TLS.
     */
    tokenUrl: string;
}

export interface OAuthImplicitFlow extends BasicOAuthFlow, WithAuthorizationUrl {}
export interface OAuthPasswordFlow extends BasicOAuthFlow, WithTokenUrl {}
export interface OAuthClientCredentialsFlow extends BasicOAuthFlow, WithTokenUrl {}
export interface OAuthAuthorizationCodeFlow extends BasicOAuthFlow, WithAuthorizationUrl, WithTokenUrl {}

/**
 * Allows configuration of the supported OAuth Flows.
 *
 * @see https://spec.openapis.org/oas/v3.1.0#oauth-flows-object
 */
export interface OAuthFlows extends Extendable {
    /**
     * Configuration for the OAuth Implicit flow
     */
    implicit?: OAuthImplicitFlow;
    /**
     * Configuration for the OAuth Resource Owner Password flow
     */
    password?: OAuthPasswordFlow;
    /**
     * Configuration for the OAuth Client Credentials flow. Previously called
     * `application` in OpenAPI 2.0.
     */
    clientCredentials?: OAuthClientCredentialsFlow;
    /**
     * Configuration for the OAuth Authorization Code flow. Previously called
     * `accessCode` in OpenAPI 2.0.
     */
    authorizationCode?: OAuthAuthorizationCodeFlow;
}

export interface OAuthSecurity extends Omit<BaseSecurity, 'flows'> {
    type: 'oauth2';
    /**
     * An object containing configuration information for the flow types
     * supported.
     */
    flows: OAuthFlows;
}

export interface OpenIdConnectSecurity extends Omit<BaseSecurity, 'openIdConnectUrl'> {
    type: MayLowercase<'openIdConnect'>;
    /**
     * OpenId Connect URL to discover OAuth2 configuration values. This _MUST_
     * be in the form of a URL. The OpenID Connect standard requires the use of
     * TLS.
     */
    openIdConnectUrl: string;
}

/**
 * Defines a security scheme that can be used by the operations.
 *
 * Supported schemes are HTTP authentication, an API key (either as a header, a
 * cookie parameter or as a query parameter), mutual TLS (use of a client
 * certificate), OAuth2â€™s common flows (implicit, password, client credentials
 * and authorization code) as defined in
 * \[[RFC6749](https://spec.openapis.org/oas/v3.1.0#bib-RFC6749)\], and [OpenID
 * Connect
 * Discovery](https://tools.ietf.org/html/draft-ietf-oauth-discovery-06). Please
 * note that as of 2020, the implicit flow is about to be deprecated by [OAuth
 * 2.0 Security Best Current
 * Practice](https://tools.ietf.org/html/draft-ietf-oauth-security-topics).
 * Recommended for most use case is Authorization Code Grant flow with PKCE.
 *
 * @see https://spec.openapis.org/oas/v3.1.0#security-scheme-object
 */
export type SecurityScheme =
    | ApiKeySecurity
    | HttpBearerSecurity
    | HttpSecurity
    | MutualTLSSecurity
    | OAuthSecurity
    | OpenIdConnectSecurity;

/**
 * Lists the required security schemes to execute this operation. The name used
 * for each property _MUST_ correspond to a security scheme declared in the
 * [Security
 * Schemes](https://spec.openapis.org/oas/v3.1.0#componentsSecuritySchemes)
 * under the [Components
 * Object](https://spec.openapis.org/oas/v3.1.0#componentsObject).
 *
 * Security Requirement Objects that contain multiple schemes require that all
 * schemes _MUST_ be satisfied for a request to be authorized. This enables
 * support for scenarios where multiple query parameters or HTTP headers are
 * required to convey security information.
 *
 * When a list of Security Requirement Objects is defined on the [OpenAPI
 * Object](https://spec.openapis.org/oas/v3.1.0#oasObject) or [Operation
 * Object](https://spec.openapis.org/oas/v3.1.0#operationObject), only one of
 * the Security Requirement Objects in the list needs to be satisfied to
 * authorize the request.
 *
 * @see https://spec.openapis.org/oas/v3.1.0#security-requirement-object
 */
export interface SecurityRequirement {
    /**
     * Each name _MUST_ correspond to a security scheme which is declared in the
     * [Security
     * Schemes](https://spec.openapis.org/oas/v3.1.0#componentsSecuritySchemes)
     * under the [Components
     * Object](https://spec.openapis.org/oas/v3.1.0#componentsObject). If the
     * security scheme is of type `"oauth2"` or `"openIdConnect"`, then the
     * value is a list of scope names required for the execution, and the list
     * _MAY_ be empty if authorization does not require a specified scope. For
     * other security scheme types, the array _MAY_ contain a list of role names
     * which are required for the execution, but are not otherwise defined or
     * exchanged in-band.
     */
    [securitySchemeName: string]: string[];
}

export {};
