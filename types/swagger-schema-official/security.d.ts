import { Extendable } from './common';

type MayLowercase<T extends string> = T | Lowercase<T>;

/**
 * The type of the security scheme. Supported schemes are:
 * - HTTP authentication
 * - an API key (either as a header, a cookie parameter or as a query parameter)
 * - mutual TLS (use of a client certificate)
 * - OAuth2's common flows (implicit, password, client credentials and
 *   authorization code) as defined in RFC6749
 * - OpenID Connect Discovery.
 */
export type SecurityType = MayLowercase<'apiKey' | 'http' | 'mutualTLS' | 'oauth2' | 'openIdConnect'>;

export interface BaseSecurity extends Extendable {
    /**
     * The type of the security scheme.
     */
    type: SecurityType;
    /**
     * A description for security scheme. CommonMark syntax MAY be used for rich
     * text representation.
     * @see https://spec.commonmark.org/
     */
    description?: string;
}

export type ApiKeyLocation = 'query' | 'header' | 'cookie';

export interface ApiKeySecurity extends BaseSecurity {
    type: 'apiKey';
    /**
     * The name of the header, query or cookie parameter to be used.
     */
    name: string;
    /**
     * The location of the API key.
     */
    in: ApiKeyLocation;
}

/**
 * Schemes defined in IANA Authentication Scheme Registry
 * @see https://www.iana.org/assignments/http-authschemes/http-authschemes.xhtml
 */
export type HttpSecurityScheme = MayLowercase<
    | 'Basic'
    | 'Bearer'
    | 'Digest'
    | 'DPoP'
    | 'HOBA'
    | 'Mutual'
    | 'Negotiate'
    | 'OAuth'
    | 'SCRAM-SHA-1'
    | 'SCRAM-SHA-256'
    | 'vapid'
>;

export interface HttpSecurity extends BaseSecurity {
    type: 'http';
    /**
     * The name of the HTTP Authorization scheme to be used in the Authorization
     * header as defined in RFC7235. The values used SHOULD be registered in the
     * IANA Authentication Scheme registry.
     *
     * @see https://tools.ietf.org/html/rfc7235#section-5.1
     * @see https://www.iana.org/assignments/http-authschemes/http-authschemes.xhtml
     */
    scheme: HttpSecurityScheme;
}

export interface HttpBearerSecurity extends HttpSecurity {
    type: 'http';
    scheme: MayLowercase<'Bearer'>;
    /**
     * A hint to the client to identify how the bearer token is formatted.
     * Bearer tokens are usually generated by an authorization server, so this
     * information is primarily for documentation purposes.
     */
    bearerFormat?: string;
}

export interface MutualTlsSecurity extends BaseSecurity {
    type: MayLowercase<'mutualTLS'>;
}

/**
 * Configuration details for a supported OAuth Flow
 */
export interface BasicOAuthFlow extends Extendable {
    /**
     * The URL to be used for obtaining refresh tokens. This MUST be in the form
     * of a URL. The OAuth2 standard requires the use of TLS.
     */
    refreshUrl?: string;
    /**
     * The available scopes for the OAuth2 security scheme. A map between the
     * scope name and a short description for it. The map MAY be empty.
     */
    scopes?: { [scopeName: string]: string };
}

interface WithAuthorizationUrl {
    /**
     * The authorization URL to be used for this flow. This MUST be in the form
     * of a URL. The OAuth2 standard requires the use of TLS.
     */
    authorizationUrl: string;
}

interface WithTokenUrl {
    /**
     * The token URL to be used for this flow. This MUST be in the form of a
     * URL. The OAuth2 standard requires the use of TLS.
     */
    tokenUrl: string;
}

export interface OAuthImplicitFlow extends BasicOAuthFlow, WithAuthorizationUrl {}
export interface OAuthPasswordFlow extends BasicOAuthFlow, WithTokenUrl {}
export interface OAuthClientCredentialsFlow extends BasicOAuthFlow, WithTokenUrl {}
export interface OAuthAuthorizationCodeFlow extends BasicOAuthFlow, WithAuthorizationUrl, WithTokenUrl {}

/**
 * Allows configuration of the supported OAuth Flows.
 */
export interface OAuthFlows extends Extendable {
    /**
     * Configuration for the OAuth Implicit flow
     */
    implicit?: OAuthImplicitFlow;
    /**
     * Configuration for the OAuth Resource Owner Password flow
     */
    password?: OAuthPasswordFlow;
    /**
     * Configuration for the OAuth Client Credentials flow. Previously called
     * `application` in OpenAPI 2.0.
     */
    clientCredentials?: OAuthClientCredentialsFlow;
    /**
     * Configuration for the OAuth Authorization Code flow. Previously called
     * `accessCode` in OpenAPI 2.0.
     */
    authorizationCode?: OAuthAuthorizationCodeFlow;
}

export interface OAuthSecurity extends BaseSecurity {
    type: 'oauth2';
    /**
     * An object containing configuration information for the flow types
     * supported.
     */
    flows: OAuthFlows;
}

export interface OpenIdConnectSecurity extends BaseSecurity {
    type: MayLowercase<'openIdConnect'>;
    /**
     * OpenId Connect URL to discover OAuth2 configuration values. This MUST be
     * in the form of a URL. The OpenID Connect standard requires the use of
     * TLS.
     */
    openIdConnectUrl: string;
}

/**
 * Defines a security scheme that can be used by the operations.
 *
 * @see https://spec.openapis.org/oas/v3.1.0#security-scheme-object
 */
export type SecurityScheme =
    | ApiKeySecurity
    | HttpBearerSecurity
    | HttpSecurity
    | MutualTlsSecurity
    | OAuthSecurity
    | OpenIdConnectSecurity;

/**
 * Each name MUST correspond to a security scheme which is declared in the
 * Security Schemes under the Components Object. If the security scheme is of
 * type "oauth2" or "openIdConnect", then the value is a list of scope names
 * required for the execution, and the list MAY be empty if authorization does
 * not require a specified scope. For other security scheme types, the array MAY
 * contain a list of role names which are required for the execution, but are
 * not otherwise defined or exchanged in-band.
 *
 * @see https://spec.openapis.org/oas/v3.1.0#security-requirement-object
 */
export type SecurityRequirement = Record<string, string[]>;
